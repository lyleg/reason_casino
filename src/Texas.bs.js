// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Player$ReactTemplate = require("./Player.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var TexasGame$ReactTemplate = require("./TexasGame.bs.js");
var PokerStats$ReactTemplate = require("./components/PokerStats.bs.js");
var PokerPrompt$ReactTemplate = require("./components/PokerPrompt.bs.js");
var PrintPlayers$ReactTemplate = require("./components/PrintPlayers.bs.js");

var component = ReasonReact.reducerComponent("Texas");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var round = TexasGame$ReactTemplate.stringFromRound(self[/* state */2][/* round */2]);
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, PrintPlayers$ReactTemplate.make(self[/* state */2][/* players */1], self[/* state */2][/* dealer */3], /* array */[])), ReasonReact.element(/* None */0, /* None */0, PokerPrompt$ReactTemplate.make(self[/* state */2][/* round */2], (function (promptResponse) {
                            return Curry._1(self[/* send */4], /* Prompt */[promptResponse]);
                          }), (function () {
                            return Curry._1(self[/* send */4], /* Deal */0);
                          }), /* array */[])), ReasonReact.element(/* None */0, /* None */0, PokerStats$ReactTemplate.make(round, self[/* state */2][/* players */1], self[/* state */2][/* pool */4], /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* deck : [] */0,
              /* players : :: */[
                /* record */[
                  /* id */1,
                  /* hand : [] */0,
                  /* money */1000,
                  /* name */"John",
                  /* src : Computer */1
                ],
                /* :: */[
                  /* record */[
                    /* id */2,
                    /* hand : [] */0,
                    /* money */1000,
                    /* name */"Lyle",
                    /* src : Human */0
                  ],
                  /* [] */0
                ]
              ],
              /* round : PreFlop */0,
              /* dealer : record */[
                /* id */1,
                /* hand : [] */0,
                /* money */0,
                /* name */"Dealer",
                /* src : Computer */1
              ],
              /* pool */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action) {
        var player1Prompt = Player$ReactTemplate.randomBot(1);
        var player2Prompt_001 = /* promptResponse */action[0];
        var player2Prompt = /* record */[
          /* id */2,
          player2Prompt_001
        ];
        var prompts_001 = /* :: */[
          player2Prompt,
          /* [] */0
        ];
        var prompts = /* :: */[
          player1Prompt,
          prompts_001
        ];
        var match = Player$ReactTemplate.processPlayers(/* [] */0, state[/* players */1], state[/* dealer */3], prompts);
        var players = match[0];
        var board_000 = state[/* deck */0];
        var board = /* tuple */[
          board_000,
          players
        ];
        var match$1 = state[/* round */2];
        var match$2;
        switch (match$1) {
          case 1 : 
              var match$3 = TexasGame$ReactTemplate.dealToPlayers(board, players, 1);
              match$2 = /* tuple */[
                match$3[0],
                match$3[1],
                /* Middle */2
              ];
              break;
          case 2 : 
              var match$4 = TexasGame$ReactTemplate.dealToPlayers(board, players, 1);
              match$2 = /* tuple */[
                match$4[0],
                match$4[1],
                /* River */3
              ];
              break;
          case 3 : 
              var match$5 = TexasGame$ReactTemplate.dealToPlayers(board, players, 1);
              match$2 = /* tuple */[
                match$5[0],
                match$5[1],
                /* End */4
              ];
              break;
          case 0 : 
          case 4 : 
              throw [
                    Caml_builtin_exceptions.match_failure,
                    [
                      "Texas.re",
                      47,
                      8
                    ]
                  ];
          
        }
        return /* Update */Block.__(0, [/* record */[
                    /* deck */match$2[0],
                    /* players */match$2[1],
                    /* round */match$2[2],
                    /* dealer */match[1],
                    /* pool */state[/* pool */4]
                  ]]);
      } else {
        var match$6 = TexasGame$ReactTemplate.deal(state[/* players */1]);
        return /* Update */Block.__(0, [/* record */[
                    /* deck */match$6[0],
                    /* players */match$6[1],
                    /* round : Flop */1,
                    /* dealer */state[/* dealer */3],
                    /* pool */state[/* pool */4]
                  ]]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
